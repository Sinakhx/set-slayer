var n=class extends Set{constructor(...e){super(...e);this.contains=this.has;this.remove=this.delete;this.subtract=this.difference;if(!!n.autoGlobals)if(!n._globalSet)n._globalSet=new Set(this.elements);else for(let t of e)n._globalSet.add(t)}get globalSet(){return new n(n._globalSet?Array.from(n._globalSet):[])}set globalSet(e){n._globalSet=new Set(e.elements)}static from(...e){let t=new n;for(let s of e)s instanceof n||s instanceof Set?t.add(Array.from(s)):t.add(s);return t}get elements(){return Array.from(this.keys())}toArray(){return this.elements}isEmpty(){return this.size===0}isSingleton(){return this.size===1}forEach(e,t){for(let s of this.keys())e.call(t,s,s,this)}map(e,t){let s=[];for(let r of this.keys())s.push(e.call(t,r,r,this));return new n(s)}filter(e,t){let s=[];for(let r of this.keys())e.call(t,r,r,this)&&s.push(r);return new n(s)}reduce(e,t){let s=t;for(let r of this.keys())s=e.call(this,s,r,r,this);return s}isSet(e){return e instanceof n||e instanceof Set}clone(){return new n(this.elements)}isSubsetOf(e){for(let t of this.keys())if(!e.has(t))return!1;return!0}isProperSubsetOf(e){return this.size>=e.size?!1:this.isSubsetOf(e)}isSupersetOf(e){return e.isSubsetOf(this)}isProperSupersetOf(e){return this.size<=e.size?!1:this.isSupersetOf(e)}isDisjointOf(e){for(let t of this.keys())if(e.has(t))return!1;return!0}isEqualTo(e){return this.size!==e.size?!1:this.isSubsetOf(e)}union(...e){let t=e.reduce((s,r)=>s.concat(r.elements),this.elements);return new n(t)}intersection(...e){let t=this.elements;for(let s of e){let r=[];for(let o of t)s.has(o)&&r.push(o);t=r}return new n(t)}difference(e){let t=[];for(let s of this.keys())e.has(s)||t.push(s);return new n(t)}symmetricDifference(...e){let t=e.concat(this),s=(r,o)=>{let a=[];for(let i of r.keys())o.has(i)||a.push(i);for(let i of o.keys())r.has(i)||a.push(i);return new n(a)};return t.reduce((r,o)=>s(r,o),this)}complement(e){let t=this;return!e&&n.autoGlobals&&(t=this.globalSet),t.difference(this)}cartesianProduct(e){let t=[];for(let s of this.keys())for(let r of e.keys())t.push([s,r]);return new n(t)}powerSet(){let e=this.elements,t=[],s=(r,o)=>{if(r===e.length){t.push(o);return}s(r+1,o.concat([e[r]])),s(r+1,o)};return s(0,[]),new n(t.map(r=>new n(r)))}subsets(){return function*t(s,r){for(;r<s.length;){let o=s[r++];for(let a of t(s,r))a.push(o),yield a}yield[]}(this.elements,0)}subsetsCount(){return 2**this.size}},S=n;S.autoGlobals=!1;var l=S;var h=l;export{h as default};
